{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "locales/locales.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "sourceLocale",
          "default": "`en`",
          "description": "The locale code that templates in this source code are written in."
        },
        {
          "kind": "variable",
          "name": "targetLocales",
          "type": {
            "text": "array"
          },
          "default": "[ , ]",
          "description": "The other locale codes that this application is localized into. Sorted\nlexicographically."
        },
        {
          "kind": "variable",
          "name": "allLocales",
          "type": {
            "text": "array"
          },
          "default": "[ `en`, ]",
          "description": "All valid project locale codes. Sorted lexicographically."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sourceLocale",
          "declaration": {
            "name": "sourceLocale",
            "module": "locales/locales.js"
          }
        },
        {
          "kind": "js",
          "name": "targetLocales",
          "declaration": {
            "name": "targetLocales",
            "module": "locales/locales.js"
          }
        },
        {
          "kind": "js",
          "name": "allLocales",
          "declaration": {
            "name": "allLocales",
            "module": "locales/locales.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/context.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "messengerStoreContext"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "messengerStoreContext",
          "declaration": {
            "name": "messengerStoreContext",
            "module": "src/context.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./messenger-store.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./messenger-client.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./context.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./types.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/messenger-client.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MessengerClient",
          "members": [
            {
              "kind": "method",
              "name": "sendPeerMessage",
              "parameters": [
                {
                  "name": "recipient",
                  "type": {
                    "text": "AgentPubKey"
                  }
                },
                {
                  "name": "message",
                  "type": {
                    "text": "Message"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "queryPrivateMessengerEntries",
              "return": {
                "type": {
                  "text": "Promise<\n\t\tRecord<EntryHashB64, PrivateMessengerEntry>\n\t>"
                }
              }
            }
          ],
          "superclass": {
            "name": "ZomeClient",
            "package": "@tnesh-stack/utils"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MessengerClient",
          "declaration": {
            "name": "MessengerClient",
            "module": "src/messenger-client.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/messenger-store.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MessengerStore",
          "members": [
            {
              "kind": "field",
              "name": "privateMessengerEntries",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "peerConversations",
              "default": "new AsyncComputed(() => { const messages = this.privateMessengerEntries.get(); if (messages.status !== 'completed') return messages; const conversations: Array<Array<AgentPubKey>> = []; for (const [messageHash, message] of Object.entries(messages.value)) { } return { status: 'completed', value: conversations, }; })"
            },
            {
              "kind": "field",
              "name": "allAgentsFor",
              "privacy": "private",
              "default": "new MemoHoloHashMap((agent: AgentPubKey) => { if (this.linkedDevicesStore) { return new AsyncComputed(() => { const devices = this.linkedDevicesStore!.linkedDevicesForAgent.get(agent).get(); if (devices.status !== 'completed') return devices; return { status: 'completed', value: [agent, ...devices.value], }; }); } else { return new AsyncState({ status: 'completed', value: [agent] }); } })"
            },
            {
              "kind": "field",
              "name": "allMyAgents"
            },
            {
              "kind": "field",
              "name": "peerChat",
              "default": "new MemoHoloHashMap( (agent: AgentPubKey) => new AsyncComputed(() => { const messages = this.privateMessengerEntries.get(); const theirAgents = this.allAgentsFor.get(agent).get(); if (messages.status !== 'completed') return messages; if (theirAgents.status !== 'completed') return theirAgents; const agentMessages: Record<EntryHashB64, Signed<PeerMessage>> = {}; const theirAgentsB64 = theirAgents.value.map(encodeHashToBase64); for (const [messageHash, message] of Object.entries( messages.value.peerMessages, )) { const messageFromThem = theirAgentsB64.includes( encodeHashToBase64(message.provenance), ); const messageForThem = theirAgentsB64.includes( encodeHashToBase64(message.signed_content.content.recipient), ); if (messageForThem || messageFromThem) { agentMessages[messageHash] = message; } } return { status: 'completed', value: agentMessages, }; }), )"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MessengerStore",
          "declaration": {
            "name": "MessengerStore",
            "module": "src/messenger-store.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mocks.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MessengerZomeMock",
          "superclass": {
            "name": "ZomeMock",
            "package": "@tnesh-stack/utils"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MessengerZomeMock",
          "declaration": {
            "name": "MessengerZomeMock",
            "module": "src/mocks.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "asyncReadable",
          "parameters": [
            {
              "name": "initFn",
              "type": {
                "text": "(set: (value: T) => void) => Promise<(() => void) | void>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "asyncReadable",
          "declaration": {
            "name": "asyncReadable",
            "module": "src/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/messenger-context.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MessengerContext",
          "members": [
            {
              "kind": "field",
              "name": "store",
              "type": {
                "text": "MessengerStore"
              },
              "attribute": "store"
            }
          ],
          "attributes": [
            {
              "name": "store",
              "type": {
                "text": "MessengerStore"
              },
              "fieldName": "store"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "messenger-context",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MessengerContext",
          "declaration": {
            "name": "MessengerContext",
            "module": "src/elements/messenger-context.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "messenger-context",
          "declaration": {
            "name": "MessengerContext",
            "module": "src/elements/messenger-context.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/peer-chat.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PeerChat",
          "members": [
            {
              "kind": "field",
              "name": "peer",
              "type": {
                "text": "AgentPubKey"
              },
              "attribute": "peer"
            },
            {
              "kind": "field",
              "name": "store",
              "type": {
                "text": "MessengerStore"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderChat",
              "privacy": "private",
              "parameters": [
                {
                  "name": "myAgents",
                  "type": {
                    "text": "AgentPubKey[]"
                  }
                },
                {
                  "name": "messages",
                  "type": {
                    "text": "Record<EntryHashB64, Signed<PeerMessage>>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderMessage",
              "privacy": "private",
              "parameters": [
                {
                  "name": "messageHash",
                  "type": {
                    "text": "EntryHashB64"
                  }
                },
                {
                  "name": "message",
                  "type": {
                    "text": "Signed<PeerMessage>"
                  }
                },
                {
                  "name": "myAgentsB64",
                  "type": {
                    "text": "AgentPubKeyB64[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "sendMessage",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderTextInput",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "peer",
              "type": {
                "text": "AgentPubKey"
              },
              "fieldName": "peer"
            }
          ],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@tnesh-stack/signals"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "peer-chat",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PeerChat",
          "declaration": {
            "name": "PeerChat",
            "module": "src/elements/peer-chat.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "peer-chat",
          "declaration": {
            "name": "PeerChat",
            "module": "src/elements/peer-chat.ts"
          }
        }
      ]
    }
  ]
}
